{"ast":null,"code":"var _jsxFileName = \"/Users/polinarudenko/Documents/Projects/arlekino/src/components/Forms/UserForm/UserForm.jsx\";\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport StyledInput from './styled/StyledInput';\nimport StyledInputPassword from './styled/StyledInputPassword';\nimport { Form } from 'antd';\nimport StyledUserFormPanel from './styled/StyledUserFormPanel';\nimport StyledEditIcon from './styled/StyledEditIcon';\nimport StyledForm from './styled/StyledForm';\nimport StyledAcceptIcon from './styled/StyledAcceptIcon';\n\nconst UserForm = ({\n  handleSubmit,\n  formName,\n  intl\n}) => {\n  const [isEditable, setEditable] = useState(false);\n\n  const toggleEditable = () => {\n    setEditable(!isEditable);\n  };\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/React.createElement(StyledForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: intl.formatMessage({\n      id: 'FormUser.Login'\n    }),\n    rules: [{\n      required: true,\n      message: 'Заполните поле'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledInput, {\n    name: \"login\",\n    defaultValue: 'valeriy_p',\n    readOnly: !isEditable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(StyledUserFormPanel, {\n    editable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, !isEditable ? /*#__PURE__*/React.createElement(StyledEditIcon, {\n    onClick: toggleEditable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledAcceptIcon, {\n    onClick: toggleEditable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    onClick: toggleEditable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: intl.formatMessage({\n      id: 'FormUser.Password'\n    }),\n    rules: [{\n      required: true,\n      message: 'Заполните поле'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledInputPassword, {\n    value: 'valeriy_p',\n    name: \"pass\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: intl.formatMessage({\n      id: 'FormUser.Email'\n    }),\n    rules: [{\n      required: true,\n      message: 'Заполните поле'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledInput, {\n    value: 'valeriy@mail.ru',\n    placeholder: 'valeriy@mail.ru',\n    name: \"mail\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default injectIntl(UserForm);","map":{"version":3,"sources":["/Users/polinarudenko/Documents/Projects/arlekino/src/components/Forms/UserForm/UserForm.jsx"],"names":["React","useState","injectIntl","StyledInput","StyledInputPassword","Form","StyledUserFormPanel","StyledEditIcon","StyledForm","StyledAcceptIcon","UserForm","handleSubmit","formName","intl","isEditable","setEditable","toggleEditable","form","useForm","formatMessage","id","required","message"],"mappings":"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","sourcesContent":["import React , { useState } from 'react'\nimport { injectIntl } from 'react-intl'\nimport StyledInput from './styled/StyledInput'\nimport StyledInputPassword from './styled/StyledInputPassword'\nimport { Form } from 'antd'\nimport StyledUserFormPanel from './styled/StyledUserFormPanel'\nimport StyledEditIcon from './styled/StyledEditIcon'\nimport StyledForm from './styled/StyledForm'\nimport StyledAcceptIcon from './styled/StyledAcceptIcon'\n\nconst UserForm = ({\n  handleSubmit,\n  formName,\n  intl\n}) => {\n  const [ isEditable, setEditable ] = useState(false);\n  const toggleEditable = () => {\n    setEditable(!isEditable);\n  };\n  const [form] = Form.useForm();\n\n  return (\n    <StyledForm>\n      <Form form={form} layout=\"horizontal\">\n        <Form.Item\n          label={intl.formatMessage({id: 'FormUser.Login'})}\n          rules={[\n            {\n              required: true,\n              message: 'Заполните поле',\n            },\n          ]}\n        >\n          <StyledInput\n            name=\"login\"\n            defaultValue={'valeriy_p'}\n            readOnly={ !isEditable }\n          />\n          <StyledUserFormPanel editable={true}>\n            {(!isEditable)?\n              (\n                <StyledEditIcon onClick={toggleEditable} />\n              )\n              :\n              (\n                <>\n                  <StyledAcceptIcon onClick={toggleEditable}></StyledAcceptIcon>\n                  <i onClick={toggleEditable}></i>\n                </>\n              )\n            }\n          </StyledUserFormPanel>\n\n        </Form.Item>\n\n        <Form.Item\n          label={intl.formatMessage({id: 'FormUser.Password'})}\n          rules={[\n            {\n              required: true,\n              message: 'Заполните поле',\n            },\n          ]}\n        >\n\n          <StyledInputPassword\n            value={'valeriy_p'}\n            name=\"pass\"\n            readOnly={ true }\n\n          />\n        </Form.Item>\n\n        <Form.Item\n          label={intl.formatMessage({id: 'FormUser.Email'})}\n          rules={[\n            {\n              required: true,\n              message: 'Заполните поле',\n            },\n          ]}\n        >\n          <StyledInput\n            value={'valeriy@mail.ru'}\n            placeholder={'valeriy@mail.ru'}\n            name=\"mail\"\n            readOnly={ true }\n\n          />\n        </Form.Item>\n      </Form>\n    </StyledForm>\n  )\n};\nexport default injectIntl(UserForm);"]},"metadata":{},"sourceType":"module"}